<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="#LANG">

    <head>
        <title>#Projet d'Imagerie</title>
        <meta http-equiv="Content-Type" content="text/html; charset=#CHARSET">


        <link rel="stylesheet" href="./style/style.css" type="text/css">
        <link rel="stylesheet" href="./style/shCore.css" type="text/css">
        <link rel="stylesheet" href="./style/shCoreDefault.css" type="text/css">
		<link rel="stylesheet" href="./style/custom.css" type="text/css">

		<script type="text/javascript" src="script/shCore.js"></script>
		<script type="text/javascript" src="script/shBrushCpp.js"></script>

        <meta name="KeyWords" content="ISIMA, TP, imagerie">


        <meta name="Description" content="compte rendu de projet de TP">
    </head>

    <body>
        <h1>
            Segmentation d'objets en mouvement en utilisant l'estimation par flot optique.
        </h1>
        <h3>
            Benjamin Barbesange - Pierre Chevalier, ISIMA 3&egrave;me Ann&eacute;e - Filli&egrave;re 2
        </h3>
        <h1 class="titrearticle">
            Pr&eacute;sentation du sujet
        </h1>
        <p>
            Le projet se base sur une publication du laboratoire de recherche <em>CEREMADE</em> de l'<em>Universit&eacute; de Paris 9</em> effectu&eacute;e le 18 Juin 2004.
        </p>

        <p>
            L'inter&ecirc;t du projet est de pouvoir d&eacute;tecter de mani&egrave;re fiable les objets en mouvements au sein d'une s&eacute;quence vid&eacute;o. Pour des raisons de simplifications, nous traiterons ici des lots de 2 images extraites d'une s&eacute;quence vid&eacute;o où des objets sont en mouvement.
        </p>

        <h1 class="titrearticle">
            M&eacute;thode
        </h1>

            <h2 class="soustitrearticle">
                Partie th&eacute;orique
            </h2>

            <p>
                Dans ce projet, deux techniques vont se retrouver conjointement sur le traitement de nos images.
            </p>

            <h3 class="soussoustitrearticle">
                Flot optique
            </h3>

            <p>
            	La m&eacute;thode du flot optique permet de d&eacute;tecter les mouvements sur deux images cons&eacute;cutives. Son but est de calculer &agrave; partir d'un ensemble d'image 2D une approximation du mouvement 2D d'une projection de points &agrave; v&eacute;locit&eacute; en 3D sur une image. Le flot optique va ainsi donner une estimation d'un mouvement apparent en plusieurs images de niveau de gris.
            </p>
            
            <p>
				Pour int&eacute;grer le flot optique &agrave; notre algorithme, c'est &agrave; dire pour que cette d&eacute;tection de mouvement soit int&eacute;gr&eacute;e &agrave; notre contour actif, il faut transformer le r&eacute;sultat en une matrice repr&eacute;sentant le mouvement. Nous normons donc la distribution en niveau de gris pour obtenir une "image" mettant en valeur les mouvements.
			</p>

            <pre class="brush: cpp">
                const CImg<> imgInVitesse = ((imgInHS.get_channel(0).get_sqr() + imgInHS.get_channel(1).get_sqr()).get_sqrt());
            </pre>

            <p>
            	Il existe plusieurs algorithme pour r&eacute;aliser ce filtre : l'algorithme de Lucas et Kanade, Horn et Schunck, Weickert et Schnörr. Ce dernier est celui propos&eacute; par le sujet du projet. Il ajoute une fonction de lissage au flot optique pour am&eacute;liorer ses r&eacute;sultats. Cette m&eacute;thode toutefois ne r&eacute;p&egrave;re pas de maniere efficace les mouvements les plus petits mais permet une r&eacute;duction du bruit, c'est pour cela qu'elle est mise en avant dans le document. La m&eacute;thode de Horn et Schunck de son c&ocirc;t&eacute; peut donner des r&eacute;sultats plus bruit&eacute;s mais l'ajustement de ses param&egrave;tres (lambda) fournit des r&eacute;sultats acceptables.
			</p>
		<div class=image_group>	
			<figure>
                <img src="../rsc/small_lambda.png" alt="R&eacute;sultat Horn &amp;Schunck" height="128">
                <figcaption>
                    R&eacute;sultat Horn &amp;Schunck avec un lambda peu &eacute;lev&eacute;
                </figcaption>
            </figure>
					
			<figure>
                <img src="../rsc/big_lambda.png" alt="R&eacute;sultat Horn &amp;Schunck" height="128">
                <figcaption>
                    R&eacute;sultat Horn &amp;Schunck avec un lambda &eacute;lev&eacute;
                </figcaption>
            </figure>
        </div>
            
			<p>
            	Du fait de ces r&eacute;sultats satisfaisant avec un lambda &eacute;lev&eacute;, nous utilisons l'algorithme de Horn et Schunck dans notre impl&eacute;mentation. 
            </p>

            <h3 class="soussoustitrearticle">
                Contours actifs
            </h3>

            <p>
                Afin de pouvoir mettre en &eacute;vidence les diff&eacute;rents objets des images qui sont en mouvement, nous allons faire appel &agrave; la m&eacute;thode des contours actifs g&eacute;od&eacute;siques.
            </p>

            <p>
                Pour ce faire, nous allons disposer d'un contour initial quelconque plac&eacute; dans l'image. Puis nous allons faire &eacute;voluer ce contour dans l'image. Ce contour prendra en compte l'&eacute;volution de l'image entre 2 intervalles de temps. Au fur et &agrave; mesure d'it&eacute;rations sur l'&eacute;volution de ce contour, celui-ci s'approchera de plus en plus du r&eacute;sultat th&eacute;orique attendu, et va donc d&eacute;tourer les objets en mouvement.
            </p>

            <p>
                Une fonction de courbe g&eacute;od&eacute;sique est calcul&eacute;e et va permettre de faire &eacute;voluer notre contour. Cette fonction est la suivante :
                <ul>
					<li/>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mfenced><mi>(x)</mi></mfenced><mo>&#xA0;</mo><mo>=</mo><mfrac><mn>1/</mn><mrow><mo>&#xA0;</mo><mo>(</mo><mn>1</mn><mo>&#xA0;</mo><mo>+</mo><mo>&#xA0;</mo><mo>|</mo><mo>&#x2207;</mo><mi>I</mi><mi>m</mi><mi>g</mi><mo>|</mo><mo>&#xA0;</mo><mo>)</mo></mrow></mfrac></math>

                    
                </ul>
               
            </p>
            <p>
                La fonction d'&eacute;volution du contour est la suivante :
                <ul>
                    <li/> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mo>&#xA0;</mo><mo>=</mo><mo>&#xA0;</mo><mi>a</mi><mo>*</mo><msub><mi>F</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi></mrow></msub><mo>&#xA0;</mo><mo>+</mo><mo>&#xA0;</mo><mi>b</mi><mo>*</mo><msub><mi>F</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>v</mi></mrow></msub><mo>&#xA0;</mo><mo>+</mo><mo>&#xA0;</mo><mi>c</mi><mo>*</mo><msub><mi>F</mi><mrow><mi>a</mi><mi>d</mi><mi>v</mi></mrow></msub><mo>&#xA0;</mo></math>
                </ul>

                Avec :
                <ul>
                    <li/><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi></mrow></msub></math>: force de propagation, d&eacute;finit la vitesse d'&eacute;volution du contour,
                    <li/> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>v</mi></mrow></msub></math>: rayon de courbure, d&eacute;finit les contraintes d'&eacute;volution sur la forme du contour et d&eacute;pend du rayon de courbure,
                    <li/><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>a</mi><mi>d</mi><mi>v</mi></mrow></msub></math> : force d'advection,
                    <li/> a, b et c des coefficients permettant de plus ou moins consid&eacute;rer un des termes dans la formule.
                </ul>
            </p>

            <h3 class="soussoustitrearticle">
                Combinaison des techniques
            </h3>
            
            <p>
                Nous allons donc nous servir du flot optique afin de d&eacute;terminer les mouvements dans l'image. Ces donn&eacute;es de mouvement se retrouvent dans la fonction de courbe g&eacute;od&eacute;sique que notre contour devra suivre pour d&eacute;limiter au mieux les objets :
            </p>
            
				<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mfenced><mi>(x)</mi></mfenced><mo>&#xA0;</mo><mo>=</mo><mfrac><mn>1/</mn><mrow><mo>&#xA0;</mo><mo>(</mo><mn>1</mn><mo>&#xA0;</mo><mo>+</mo><mo>&#xA0;</mo><mo>|</mo><mo>&#x2207;</mo><mi>I</mi><mi>m</mi><mi>g</mi><mo>|</mo><mo>&#xA0;</mo><mo>)</mo></mfrac><mo>-</mo><mo>&#xA0;</mo><mo>&#x2225;</mo><mo>&#xA0;</mo><mi>V</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>V</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>e</mi><mo>(</mo><mi>I</mi><mi>m</mi><mi>g</mi><mo>)</mo><mo>&#xA0;</mo><mo>&#x2225;</mo></mrow></math>
            
        <h2 class="soustitrearticle">
            Impl&eacute;mentation
        </h2>
        
            Les techniques abbord&eacute;es pr&eacute;c&eacute;demment ont &eacute;t&eacute; mise en place en C++ &agrave; l'aide de la biblioth&egrave;que CImg.

            <h3 class="soussoustitrearticle">
                Flot optique
            </h3>

        <p>
                Notre impl&eacute;mentation du flot optique met en oeuvre la formule suivante :
        </p>
                
		<math xmlns="http://www.w3.org/1998/Math/MathML">
		  <msub>
			<mo>&#x222B;<!-- ∫ --></mo>
			<mi>D</mi>
		  </msub>
		  <mo stretchy="false">(</mo>
		  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi>I</mi>
		  </mrow>
		  <mo>&#x22C5;<!-- ⋅ --></mo>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi mathvariant="bold">v</mi>
		  </mrow>
		  <mo>+</mo>
		  <msub>
			<mi>I</mi>
			<mi>t</mi>
		  </msub>
		  <msup>
			<mo stretchy="false">)</mo>
			<mn>2</mn>
		  </msup>
		  <mo>+</mo>
		  <msup>
			<mi>&#x03BB;<!-- λ --></mi>
			<mn>2</mn>
		  </msup>
		  <mo stretchy="false">(</mo>
		  <msup>
			<mrow>
			  <mo>&#x2225;</mo>
			  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
			  <mrow class="MJX-TeXAtom-ORD">
				<mi>u</mi>
			  </mrow>
			  <mo>&#x2225;</mo>
			</mrow>
			<mn>2</mn>
		  </msup>
		  <mo>+</mo>
		  <msup>
			<mrow>
			  <mo>&#x2225;</mo>
			  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
			  <mrow class="MJX-TeXAtom-ORD">
				<mi>v</mi>
			  </mrow>
			  <mo>&#x2225;</mo>
			</mrow>
			<mn>2</mn>
		  </msup>
		  <mo stretchy="false">)</mo>
		  <mi>d</mi>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi mathvariant="bold">m</mi>
		  </mrow>
		</math>

		</br>

		<math xmlns="http://www.w3.org/1998/Math/MathML">
		  <mtable columnalign="right left right left right left right left right left right left" rowspacing="3pt" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true">
			<mtr>
			  <mtd>
				<msup>
				  <mi>u</mi>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mi>k</mi>
				    <mo>+</mo>
				    <mn>1</mn>
				  </mrow>
				</msup>
				<mo>=</mo>
				<msup>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mover>
				      <mi>u</mi>
				      <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				    </mover>
				  </mrow>
				  <mi>k</mi>
				</msup>
				<mo>&#x2212;<!-- − --></mo>
				<mfrac>
				  <mrow>
				    <msub>
				      <mi>I</mi>
				      <mi>x</mi>
				    </msub>
				    <mrow>
				      <mo>[</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>x</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>u</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>y</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>v</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>t</mi>
				      </msub>
				      <mo>]</mo>
				    </mrow>
				  </mrow>
				  <mrow>
				    <msup>
				      <mi>&#x03BB;<!-- λ --></mi>
				      <mn>2</mn>
				    </msup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>x</mi>
				      <mn>2</mn>
				    </msubsup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>y</mi>
				      <mn>2</mn>
				    </msubsup>
				  </mrow>
				</mfrac>
			  </mtd>
			</mtr>
			<mtr>
			  <mtd>
				<msup>
				  <mi>v</mi>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mi>k</mi>
				    <mo>+</mo>
				    <mn>1</mn>
				  </mrow>
				</msup>
				<mo>=</mo>
				<msup>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mover>
				      <mi>v</mi>
				      <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				    </mover>
				  </mrow>
				  <mi>k</mi>
				</msup>
				<mo>&#x2212;<!-- − --></mo>
				<mfrac>
				  <mrow>
				    <msub>
				      <mi>I</mi>
				      <mi>y</mi>
				    </msub>
				    <mrow>
				      <mo>[</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>x</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>u</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>y</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>v</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>t</mi>
				      </msub>
				      <mo>]</mo>
				    </mrow>
				  </mrow>
				  <mrow>
				    <msup>
				      <mi>&#x03BB;<!-- λ --></mi>
				      <mn>2</mn>
				    </msup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>x</mi>
				      <mn>2</mn>
				    </msubsup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>y</mi>
				      <mn>2</mn>
				    </msubsup>
				  </mrow>
				</mfrac>
			  </mtd>
			</mtr>
		  </mtable>
		</math>
		
		<p> 
			Le code est le suivant :
		</p>
		
<pre class="brush: cpp">
		
CImg<> HornSchunck(CImg<> seq, double lambda)
{
	// On initialise le resultat
	// 2 channels et 1 de depth
	// initialise avec 0
	CImg<> field(seq.width(),seq.height(),1,2,0);

	// On calcul le gradient de l'image donnee
	CImgList<> grad = seq.get_gradient("xyz",0);

	// Pour un nombre k d'iteration
	for(unsigned i =0; i < k ; i++){
		// On calcul la moyenne des valeurs
		CImg<> moy = field.get_convolve(moyenneur);
		
		// On parcours le resultat pour le assigner les valeurs
		cimg_forXY(field,x,y){
			
			// On associe les valeurs de la formule
 			field(x,y,0) =
 				moy(x,y,0) - ( grad(0)(x,y) * (grad(0)(x,y) * moy(x,y,0)  + grad(1)(x,y) * moy(x,y,1) + grad(2)(x,y)) ) /
 				( (lambda * lambda) + (grad(0)(x,y) * grad(0)(x,y)) + (grad(1)(x,y) * grad(1)(x,y)) );

 			field(x,y,1) =
	 			moy(x,y,1) - (grad(1)(x,y) * (grad(0)(x,y) * moy(x,y,0) + grad(1)(x,y) * moy(x,y,1) + grad(2)(x,y))) /
 				( (lambda * lambda) + (grad(0)(x,y) * grad(0)(x,y)) + (grad(1)(x,y) * grad(1)(x,y)) );
		}

	}

	return field;
}

</pre>

            <h3 class="soussoustitrearticle">
                Contours actifs coupl&eacute;e au flot optique
            </h3>

            <p>
                Le code suivant permet d'effectuer une recherche de contour g&eacute;od&eacute;sique dans l'image en prennant en compte les mouvements d&eacute;crits &agrave; l'aide du flot optique pr&eacute;sent&eacute; dans la partie pr&eacute;c&eacute;dente.
            </p>

<pre class="brush: cpp">
void Propagate(
	CImg<> imgIn,
	CImg<>* LevelSet,
	int nbIter,		// Nombre d'it&eacute;ration
	float lambda,		// Parametre de Horn et Schunck
	float alpha, 		// Pond&eacute;ration du terme de propagation
	float beta, 		// Pond&eacute;ration du terme d'advection
	float gamma,		// Ponderation du contour actif
	float delta_t,		// Pas temporel
	float ballon,		// Force ballon
	float theta) 		// Ponderation modele geodesique classique
{
	// Calcul des gradients spaciaux r&eacute;gularis&eacute;s de l'image
	const CImgList<> gradImg = imgIn.get_channel(0).get_gradient("xy", 4 /* Filtre qui r&eacute;gularise */);
	const CImg<> squareGradImgNorme = (gradImg[0].get_sqr() + gradImg[1].get_sqr());
	
	// Calculer le module de chaque vecteur
	const CImg<> imgInHS = HornSchunck(imgIn,lambda);

	// Calcul du module des vecteurs vitesse
	const CImg<> imgInVitesse = ((imgInHS.get_channel(0).get_sqr() + imgInHS.get_channel(1).get_sqr()).get_sqrt());
	
	const CImgList<> gradimgInVitesse = imgInVitesse.get_gradient("xy",0);
	const CImg<> squareGradImgVitess = (gradimgInVitesse[0].get_sqr() + gradimgInVitesse[1].get_sqr());
	
	// Calcul de la fonction d'arr&ecirc;t g du mod&egrave;le g&eacute;od&eacute;sique
	CImg<> g(imgIn.width(), imgIn.height(), 1, 1);
	cimg_forXY(g, x, y)
	{
		g(x, y) = ( 1.0 / double(1.0 + squareGradImgNorme(x, y)*(float)theta ) ) + ballon - (float)imgInVitesse(x,y)*(float)gamma;
	}
	
	const CImgList<> gradG = g.get_gradient("xy");

	for (int i = 0 ; i < nbIter ; ++i)
	{
		// Calcul des d&eacute;riv&eacute;es de LevelSet
		const CImgList<> Dm = LevelSet->get_gradient("xy", -1);
		//const CImgList<> Dc = LevelSet->get_gradient("xy", 0);
		const CImgList<> Dp = LevelSet->get_gradient("xy", 1);
				
		cimg_forXY(*LevelSet, x, y)
		{		
			// Valeurs des d&eacute;riv&eacute;es de LevelSet
			const float& Dxm = Dm[0](x, y);
			const float& Dxp = Dp[0](x, y);
			const float& Dym = Dm[1](x, y);
			const float& Dyp = Dp[1](x, y);
			
			// Calcul des nablas
			// Pour Dx
			const float maxDxm0 = MAX(Dxm, 0);
			const float minDxm0 = MIN(Dxm, 0);
			const float maxDxp0 = MAX(Dxp, 0);
			const float minDxp0 = MIN(Dxp, 0);
			
			// Pour Dy
			const float maxDym0 = MAX(Dym, 0);
			const float minDym0 = MIN(Dym, 0);
			const float maxDyp0 = MAX(Dyp, 0);
			const float minDyp0 = MIN(Dyp, 0);
			
			// Nablas
			const float nablap = std::sqrt(	maxDxm0 * maxDxm0
											+ minDxp0 * minDxp0
											+ maxDym0 * maxDym0
											+ minDyp0 * minDyp0);
			const float nablam = std::sqrt(	maxDxp0 * maxDxp0
											+ minDxm0 * minDxm0
											+ maxDyp0 * maxDyp0
											+ minDym0 * minDym0);
		
			// Calcul de la vitesse de propagation
			const float Fprop = - (MAX(g(x, y), 0) * nablap + MIN(g(x, y), 0) * nablam);

			// Calcul de la vitesse d'advection
			const float& u = gradG[0](x, y);
			const float& v = gradG[1](x, y);
			const float Fadv = - (MAX(u, 0) * Dxm + MIN(u, 0) * Dxp + MAX(v, 0) * Dym + MIN(v, 0) * Dyp);
			
			(*LevelSet)(x, y) += delta_t * (alpha * Fprop + beta * Fadv );
		}
	}
}
</pre>

    <p>
        Le contour initial utilis&eacute; est un cercle centr&eacute; dans l'image et dont le rayon est d&eacute;termin&eacute; par le minimum entre la moiti&eacute; de la hauteur de l'image et la moiti&eacute; de la largeur de l'image.
    </p>

    <p>
        Diff&eacute;rents coefficients sont propos&eacute;s sur la ligne de commande du programme et permettent d'am&eacute;liorer le contour :
        <ul>
            <li/> -n : nombre d'it&eacute;rations &agrave; effectuer sur le contour,
            <li/> -l : param&egrave;tre lamba permettant de r&eacute;duire le bruit sur la m&eacute;thode de Horn &amp;Schunck,
            <li/> -a : agit sur l'importance de la force de propagation,
            <li/> -b : agit sur l'importance de la force d'advection,
            <li/> -g : agit sur l'importance du resultat du contour actif dans le mod&egrave;le g&eacute;od&eacute;sique
            <li/> -t : agit sur l'importance de la norme du gradient de l'image dans le mod&egrave;le g&eacute;od&eacute;sique classique
            <li/> -dt : pas temporel,
            <li/> -ballon : force de ballon.
        </ul>
    </p>

        <h1 class="titrearticle">
            R&eacute;sultats
        </h1>

        <h2 class="soustitrearticle">
            Validation sur donn&eacute;es de synth&egrave;se
        </h2>

        <p>
            Nous allons prendre pour point de d&eacute;part les deux images suivantes :

            <div class=image_group>
                <figure>
                    <img src="../rsc/carreBois1.bmp" alt="Image de synth&egrave;se 1" height="128">
                    <figcaption>
                        Image 1
                    </figcaption>
                </figure>

                <figure>
                    <img src="../rsc/carreBois2.bmp" alt="Image de synth&egrave;se 2" height="128">
                    <figcaption>
                        Image 2
                    </figcaption>
                </figure>
            </div>

            Nous pouvous clairement observer sur ces images un d&eacute;placement du carr&eacute; situ&eacute; dans la partie basse de l'image, vers le bord gauche de celle-ci.
        </p>

        <p>
            Pour ex&eacute;cuter le traitement, on utilise la commande depuis le r&eacute;pertoire ./src/ :    
        </p>
            <code>
                ./mosuofe -img1 ../rsc/carreBois1.bmp -img2 ../rsc/carreBois2.bmp -a 0.5 -t 0.05 -g 0.3 -b 0.3
            </code>

			<p>
            	Le r&eacute;sultat est le suivant :
			</p>
            <div>
                <figure>
                    <img src="../rsc/resulatCarreBois.bmp" alt="R&eacute;sultat" height="128">
                    <figcaption>
                        R&eacute;sultat de l'ex&eacute;cution du programme
                    </figcaption>
                </figure>
            </div>
        </p>
        
        <p>
            Un autre exemple avec ces deux images, dont le mouvements est pr&eacute;sent mais plus petit :

            <div class=image_group>
                <figure>
                    <img src="../rsc/test_mouv_small1.png" alt="Image de synth&egrave;se 1" height="128">
                    <figcaption>
                        Image 1
                    </figcaption>
                </figure>

                <figure>
                    <img src="../rsc/test_mouv_small2.png" alt="Image de synth&egrave;se 2" height="128">
                    <figcaption>
                        Image 2
                    </figcaption>
                </figure>
            </div>

            Nous pouvous observer sur ces images un l&eacute;ger d&eacute;placement du carr&eacute;.
        </p>

        <p>
            Pour ex&eacute;cuter le traitement, on utilise la commande depuis le r&eacute;pertoire ./src/ :    
        </p>
            <code>
            ./mosuofe -img1 ../rsc/test_mouv_small1.png -img2 ../rsc/test_mouv_small2.png -a 0.5 -t 0.05 -g 0.3 -b 0.3
            </code>

			<p>
            	Le r&eacute;sultat est le suivant :
			</p>
            <div>
                <figure>
                    <img src="../rsc/resultat_test_mouv_small.png" alt="R&eacute;sultat" height="128">
                    <figcaption>
                        R&eacute;sultat de l'ex&eacute;cution du programme
                    </figcaption>
                </figure>
            </div>
        </p>

        <p>
            Comme on peut l'observer, le programme est tout &agrave; fait capable de d&eacute;tecter l'objet en mouvement. On distingue toutefois certains soucis de pr&eacute;cision sur le contour.
            Ceci peut s'expliquer par le fait que le contour actif utilise &eacute;galement le gradient de l'image pour d&eacute;terminer les contours. Il est donc possible que dans une zone trop sombre ou trop claire, le contour soit impr&eacute;cis.
        </p>

        <h2 class="soustitrearticle">
            Donn&eacute;es r&eacute;elles
        </h2>

        <p>
            Nous allons &agrave; pr&eacute;sent tester le programme sur des donn&eacute;es r&eacute;elles. Pour ce faire, nous allons utiliser les deux images suivantes, extraites d'une s&eacute;quence vid&eacute;o (les param&egrave;tres utilis&eacute;s sont les param&egrave;tres par d&eacute;faut du programme):

            <div class=image_group>
                <figure>
                    <img src="../rsc/taxi1.bmp" alt="R&eacute;sultat" height="128">
                    <figcaption>
                        Image 1
                    </figcaption>
                </figure>
                <figure>
                    <img src="../rsc/taxi2.bmp" alt="R&eacute;sultat" height="128">
                    <figcaption>
                        Image 2
                    </figcaption>
                </figure>
            </div>
        </p>

        <p>
            Le r&eacute;sultat obtenu est le suivant :

            <div>
                <figure>
                    <img src="../rsc/a0.3t0.2g2.0b0.4l100.0.png" alt="R&eacute;sultat" height="128">
                    <figcaption>
                        R&eacute;sultat
                    </figcaption>
                </figure>
            </div>
        </p>

        <h1 class="titrearticle">
        	Discussion
        </h1>

        <p>
            Nous pouvons remarquer que cette m&eacute;thode de d&eacute;tection des contours d'objets en mouvement est plut&ocirc;t fiable comme nous avons pu le constater sur les r&eacute;sultats th&eacute;oriques.
            Cependant dans un contexte plus r&eacute;el, nous remarquons qu'il est plus diffile d'obtenir des contours pr&eacute;cis. Plusieurs facteurs en sont responsables :
            <ul>
                <li/> Un mauvais contraste dans l'image,
                <li/> Des contours pas tr&eacute;s marqu&eacute;s sur un objet (par exemple avec une ombre port&eacute;e trop importante),
                <li/> Mauvaise d&eacute;termination du mouvement d'un objet.
            </ul>
        </p>


        <h1 class="titrearticle">
            R&eacute;f&eacute;rences
        </h1>

        <p>
            <strong> <!-- authors -->
                F. Ranchin, F. Dibos
            </strong>,
            <em> <!-- title -->
                Moving Objects Segmentation Using Optical Flow Estimation
            </em>,
            <!-- Date -->
            (2004)
        </p>

        <p>
            <strong> <!-- authors -->
                B.K.P. Horn and B. Schunck
            </strong>,
            <em> <!-- title -->
                Determining Optical Flow
            </em>,
            <!-- Date -->
            Artificial intelligence
            (1981)
        </p>

        <p>
            <strong> <!-- authors -->
                R. Deriche and N. Paragios
            </strong>,
            <em> <!-- title -->
                Geodesic Active Regions for Motion Estimation and Tracking
            </em>,
            <!-- Date -->
            INRIA Research Report n° 3631
            (1999)
        </p>
        
        
    </body>
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>
</html>
