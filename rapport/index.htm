<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="#LANG">

    <head>
        <title>#Projet d'Imagerie</title>
        <meta http-equiv="Content-Type" content="text/html; charset=#CHARSET">


        <link rel="stylesheet" href="./style/style.css" type="text/css">
        <link rel="stylesheet" href="./style/shCore.css" type="text/css">
        <link rel="stylesheet" href="./style/shCoreDefault.css" type="text/css">


		<script type="text/javascript" src="script/shCore.js"></script>
		<script type="text/javascript" src="script/shBrushCpp.js"></script>

        <meta name="KeyWords" content="ISIMA, TP, imagerie">


        <meta name="Description" content="compte rendu de projet de TP">
    </head>

    <body>
        <h1>
            Segmentation d'objets en mouvement en utilisant l'estimation par flot optique.
        </h1>
        <h3>
            Benjamin Barbesange - Pierre Chevalier, ISIMA 3ème Année - Fillière 2
        </h3>
        <h1 class="titrearticle">
            Pr&eacute;sentation du sujet
        </h1>
        <p>
            Le projet se base sur une publication du laboratoire de recherche <em>CEREMADE</em> de l'<em>Université de Paris 9</em>            effectuée le 18 Juin 2004.
        </p>

        <p>
            L'interêt du projet est de pouvoir détecter de manière fiable les objets en mouvements au sein d'une séquence vidéo. Pour
            des raisons de simplifications, nous traiterons ici des lots de 2 images extraites d'une séquence vidéo où des
            objets sont en mouvement.
        </p>

        <h1 class="titrearticle">
            M&eacute;thode
        </h1>

            <h2 class="soustitrearticle">
                Partie th&eacute;orique
            </h2>

        Pr&eacute;sentation de la m&eacute;thode utilis&eacute;e et r&eacute;f&eacute;rence aux travaux connexes (cf. biblio article)<br>

            <p>
                Dans ce projet, deux techniques vont se retrouver conjointement sur le traitement de nos images.
            </p>

            <h3 class="soussoustitrearticle">
                Flot optique
            </h3>

            <p>
            	La méthode du flot optique permet de détecter les mouvements sur deux images consécutives. Son but est de calculer à partir d'un ensemble d'image 2D une approximation du mouvement 2D d'une projection de points à vélocité en 3D sur une image. Le flot optique va ainsi donner une estimation d'un mouvement apparent en plusieurs images de niveau de gris.
            </p>
            
            <p>
				Pour intégré le flot optique à notre algorithme, c'est à dire pour que cette détection de mouvement soit intégrée à notre contour actif, il faut transformer le résultat en une matrice représentant le mouvement. Nous normons donc la distribution en niveau de gris pour obtenir une image de vitesse.
			</p>
<pre class="brush: cpp">
const CImg<> imgInVitesse = ((imgInHS.get_channel(0).get_sqr() + imgInHS.get_channel(1).get_sqr()).get_sqrt());
</pre>            
            <p>
            	Il existe plusieurs algorithme pour réaliser ce filtre : l'algorithme de Lucas et Kanade, Horn et Schunck, Weickert et Schnörr. Ce dernier est celui proposé par le sujet du projet. Il ajoute une fonction de lissage au flot optique pour améliorer ses résultats. Cette méthode toutefois ne répère pas de maniere efficace les mouvements les plus petits mais permet une réduction du bruit, c'est pour cela qu'elle est mise en avant dans le document. La méthode de Horn et Schunck de son côté peut donner des résultats plus bruités mais l'ajustement de ses paramètres fournit des résultats acceptables.
			</p>
		<div>	
			<figure>
                <img src="./rsc/small_lambda.png" alt="Résultat Horn & Schunck" height="128">
                <figcaption>
                    Résultat Horn & Schunck avec un lambda peu élevé
                </figcaption>
            </figure>
					
			<figure>
                <img src="./rsc/big_lambda.png" alt="Résultat Horn & Schunck" height="128">
                <figcaption>
                    Résultat Horn & Schunck avec un lambda élevé
                </figcaption>
            </figure>
        </div>
            
			<p>
            	Du fait de ces résultats satisfaisant avec un lambda élevé, nous utilisons l'algorithme de Horn et Schunck dans notre implémentation. 
            </p>

            <h3 class="soussoustitrearticle">
                Contours actifs
            </h3>

            <p>
                Afin de pouvoir mettre en évidence les différents objets des images qui sont en mouvement, nous allons faire appel à la méthode des contours actifs géodésiques.
            </p>

            <p>
                Pour se faire, nous allons disposer d'un contour initial quelconque placé dans l'image. Puis nous allons faire évoluer ce contour dans l'image. Ce contour prendra en compte l'évolution de l'image entre 2 intervalles de temps. Au fur et à mesure d'itérations sur l'évolution de ce contour, celui-ci s'approchera de plus en plus du résultat théorique attendu, et va donc détourer les objets en mouvement.
            </p>

            <p>
                Afin que la donnée de mouvement soit bien prise en compte dans le modèle géodésique, nous allons introduire cette composante dans la fonction de calcul de l'évolution du contour.
            </p>
            
<!-- TODO: Parler de la prise en compte du flot optique dans le modele geodisique du contour actif -->


        <h2 class="soustitrearticle">
            Impl&eacute;mentation
        </h2>
        D&eacute;tails de l'impl&eacute;mentation (sous CImg)

            <h3 class="soussoustitrearticle">
                Flot optique
            </h3>

<!-- TODO: Completer un peu cette partie -->

        <p>
                Notre implémentation du flot optique met en oeuvre la formule suivante :
        </p>
                
		<math xmlns="http://www.w3.org/1998/Math/MathML">
		  <msub>
			<mo>&#x222B;<!-- ∫ --></mo>
			<mi>D</mi>
		  </msub>
		  <mo stretchy="false">(</mo>
		  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi>I</mi>
		  </mrow>
		  <mo>&#x22C5;<!-- ⋅ --></mo>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi mathvariant="bold">v</mi>
		  </mrow>
		  <mo>+</mo>
		  <msub>
			<mi>I</mi>
			<mi>t</mi>
		  </msub>
		  <msup>
			<mo stretchy="false">)</mo>
			<mn>2</mn>
		  </msup>
		  <mo>+</mo>
		  <msup>
			<mi>&#x03BB;<!-- λ --></mi>
			<mn>2</mn>
		  </msup>
		  <mo stretchy="false">(</mo>
		  <msup>
			<mrow>
			  <mo>&#x2225;</mo>
			  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
			  <mrow class="MJX-TeXAtom-ORD">
				<mi>u</mi>
			  </mrow>
			  <mo>&#x2225;</mo>
			</mrow>
			<mn>2</mn>
		  </msup>
		  <mo>+</mo>
		  <msup>
			<mrow>
			  <mo>&#x2225;</mo>
			  <mi mathvariant="normal">&#x2207;<!-- ∇ --></mi>
			  <mrow class="MJX-TeXAtom-ORD">
				<mi>v</mi>
			  </mrow>
			  <mo>&#x2225;</mo>
			</mrow>
			<mn>2</mn>
		  </msup>
		  <mo stretchy="false">)</mo>
		  <mi>d</mi>
		  <mrow class="MJX-TeXAtom-ORD">
			<mi mathvariant="bold">m</mi>
		  </mrow>
		</math>

		</br>

		<math xmlns="http://www.w3.org/1998/Math/MathML">
		  <mtable columnalign="right left right left right left right left right left right left" rowspacing="3pt" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true">
			<mtr>
			  <mtd>
				<msup>
				  <mi>u</mi>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mi>k</mi>
				    <mo>+</mo>
				    <mn>1</mn>
				  </mrow>
				</msup>
				<mo>=</mo>
				<msup>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mover>
				      <mi>u</mi>
				      <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				    </mover>
				  </mrow>
				  <mi>k</mi>
				</msup>
				<mo>&#x2212;<!-- − --></mo>
				<mfrac>
				  <mrow>
				    <msub>
				      <mi>I</mi>
				      <mi>x</mi>
				    </msub>
				    <mrow>
				      <mo>[</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>x</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>u</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>y</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>v</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>t</mi>
				      </msub>
				      <mo>]</mo>
				    </mrow>
				  </mrow>
				  <mrow>
				    <msup>
				      <mi>&#x03BB;<!-- λ --></mi>
				      <mn>2</mn>
				    </msup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>x</mi>
				      <mn>2</mn>
				    </msubsup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>y</mi>
				      <mn>2</mn>
				    </msubsup>
				  </mrow>
				</mfrac>
			  </mtd>
			</mtr>
			<mtr>
			  <mtd>
				<msup>
				  <mi>v</mi>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mi>k</mi>
				    <mo>+</mo>
				    <mn>1</mn>
				  </mrow>
				</msup>
				<mo>=</mo>
				<msup>
				  <mrow class="MJX-TeXAtom-ORD">
				    <mover>
				      <mi>v</mi>
				      <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				    </mover>
				  </mrow>
				  <mi>k</mi>
				</msup>
				<mo>&#x2212;<!-- − --></mo>
				<mfrac>
				  <mrow>
				    <msub>
				      <mi>I</mi>
				      <mi>y</mi>
				    </msub>
				    <mrow>
				      <mo>[</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>x</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>u</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>y</mi>
				      </msub>
				      <msup>
				        <mrow class="MJX-TeXAtom-ORD">
				          <mover>
				            <mi>v</mi>
				            <mo stretchy="false">&#x00AF;<!-- ¯ --></mo>
				          </mover>
				        </mrow>
				        <mi>k</mi>
				      </msup>
				      <mo>+</mo>
				      <msub>
				        <mi>I</mi>
				        <mi>t</mi>
				      </msub>
				      <mo>]</mo>
				    </mrow>
				  </mrow>
				  <mrow>
				    <msup>
				      <mi>&#x03BB;<!-- λ --></mi>
				      <mn>2</mn>
				    </msup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>x</mi>
				      <mn>2</mn>
				    </msubsup>
				    <mo>+</mo>
				    <msubsup>
				      <mi>I</mi>
				      <mi>y</mi>
				      <mn>2</mn>
				    </msubsup>
				  </mrow>
				</mfrac>
			  </mtd>
			</mtr>
		  </mtable>
		</math>
		
		<p> 
			Le code est le suivant :
		</p>
		
<pre class="brush: cpp">
		
CImg<> HornSchunck(CImg<> seq, double lambda)
{
	// On initialise le resultat
	// 2 channels et 1 de depth
	// initialise avec 0
	CImg<> field(seq.width(),seq.height(),1,2,0);

	// On calcul le gradient de l'image donnee
	CImgList<> grad = seq.get_gradient("xyz",0);

	// Pour un nombre k d'iteration
	for(unsigned i =0; i<k ; i++){
		// On calcul la moyenne des valeurs
		CImg<> moy = field.get_convolve(moyenneur);
		
		// On parcours le resultat pour le assigner les valeurs
		cimg_forXY(field,x,y){
			
			// On associe les valeurs de la formule
 			field(x,y,0) =
 				moy(x,y,0) - ( grad(0)(x,y) * (grad(0)(x,y) * moy(x,y,0)  + grad(1)(x,y) * moy(x,y,1) + grad(2)(x,y)) ) /
 				( (lambda * lambda) + (grad(0)(x,y) * grad(0)(x,y)) + (grad(1)(x,y) * grad(1)(x,y)) );

 			field(x,y,1) =
	 			moy(x,y,1) - (grad(1)(x,y) * (grad(0)(x,y) * moy(x,y,0) + grad(1)(x,y) * moy(x,y,1) + grad(2)(x,y))) /
 				( (lambda * lambda) + (grad(0)(x,y) * grad(0)(x,y)) + (grad(1)(x,y) * grad(1)(x,y)) );
		}

	}

	return field;
}

</pre>

            <h3 class="soussoustitrearticle">
                Contours actifs
            </h3>

            <p>

            </p>

        <h1 class="titrearticle">
            R&eacute;sultats
        </h1>

        <h2 class="soustitrearticle">
            Validation sur donn&eacute;es de synth&egrave;se
        </h2>

        <p>
            Nous allons prendre pour point de départ les deux images suivantes :

            <div>
                <figure>
                    <img src="../rsc/carreBois1.bmp" alt="Image de synthèse 1" height="128">
                    <figcaption>
                        Image 1
                    </figcaption>
                </figure>

                <figure>
                    <img src="../rsc/carreBois2.bmp" alt="Image de synthèse 2" height="128">
                    <figcaption>
                        Image 2
                    </figcaption>
                </figure>
            </div>

            Nous pouvous clairement observer sur ces images un déplacement du carré situé dans la partie basse de l'image, vers le bord gauche de celle-ci.
        </p>

        <p>
            Pour exécuter le traitement, on utilise la commande :    
        </p>
            <code>
                ./mosuofe -img1 ../rsc/carreBois1.bmp -img2 ../rsc/carreBois2.bmp -a 0.5 -t 0.05 -g 0.3 -b 0.3
            </code>

			<p>
            	Le résultat est le suivant :
			</p>
            <div>
                <figure>
                    <img src="../rsc/resulatCarreBois.bmp" alt="Résultat" height="128">
                    <figcaption>
                        Résultat de l'exécution du programme
                    </figcaption>
                </figure>
            </div>
        </p>

        <p>
            Comme on peut l'observer, le programme est tout à fait capable de détecter l'objet en mouvement. On distingue toutefois certains soucis de précision sur le contour.
            Ceci peut s'expliquer par le fait que le contour actif utilise également le gradient de l'image pour déterminer les contours. Il est donc possible que dans une zone trop sombre ou trop clair, le contour soit imprécis.
        </p>


        Vous devez cr&eacute;er des donn&eacute;es de synth&egrave;se pour &eacute;valuer votre m&eacute;thode<br>

        <h2 class="soustitrearticle">
            Donn&eacute;es r&eacute;elles
        </h2>

        Une fois la m&eacute;thode &eacute;valu&eacute;e, vous appliquerez votre m&eacute;thode sur des images r&eacute;elles<br>

        <h1 class="titrearticle">
        	Discussion
        </h1>

        <p>
        <!-- TODO: Parler de la difference de resultats entre les images créées et réelles -->
            Bon, ça fonctionne, mais c'est pas encore ça dans une image réélle...
        </p>

        Commentez vos r&eacute;sultats (d'un point de vue qualitatif <span style="font-weight: bold;">ET</span> quantitatif)<br>


        <h1 class="titrearticle">
            R&eacute;f&eacute;rences
        </h1>
        <!-- TODO: Reciter les references du site du prof sur l'ent et de l'article du projet -->

        Rappel des r&eacute;f&eacute;rences incontournables du sujet trait&eacute; dans l'article
    </body>
<script type="text/javascript">
     SyntaxHighlighter.all()
</script>
</html>
